// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AbilityEnum string

const (
	AbilityEnumCreateCredential AbilityEnum = "create_credential"
	AbilityEnumDeleteCredential AbilityEnum = "delete_credential"
	AbilityEnumUpdateCredential AbilityEnum = "update_credential"
	AbilityEnumGetCredential    AbilityEnum = "get_credential"
)

func (e *AbilityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AbilityEnum(s)
	case string:
		*e = AbilityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AbilityEnum: %T", src)
	}
	return nil
}

type NullAbilityEnum struct {
	AbilityEnum AbilityEnum `json:"abilityEnum"`
	Valid       bool        `json:"valid"` // Valid is true if AbilityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAbilityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.AbilityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AbilityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAbilityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AbilityEnum), nil
}

type RoleEnum string

const (
	RoleEnumAdmin RoleEnum = "admin"
)

func (e *RoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleEnum(s)
	case string:
		*e = RoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleEnum: %T", src)
	}
	return nil
}

type NullRoleEnum struct {
	RoleEnum RoleEnum `json:"roleEnum"`
	Valid    bool     `json:"valid"` // Valid is true if RoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleEnum), nil
}

type Ability struct {
	ID   int32       `json:"id"`
	Name AbilityEnum `json:"name"`
}

type Credential struct {
	ID        pgtype.UUID        `json:"id"`
	Name      pgtype.Text        `json:"name"`
	Email     string             `json:"email"`
	Username  pgtype.Text        `json:"username"`
	Password  string             `json:"password"`
	RoleID    int32              `json:"roleId"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
	DeletedAt pgtype.Timestamptz `json:"deletedAt"`
}

type Role struct {
	ID   int32    `json:"id"`
	Name RoleEnum `json:"name"`
}

type RoleAbility struct {
	ID        int32 `json:"id"`
	RoleID    int32 `json:"roleId"`
	AbilityID int32 `json:"abilityId"`
}
