// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role_ability.sql

package sqlc

import (
	"context"
)

const createRoleAbility = `-- name: CreateRoleAbility :one
INSERT INTO "role_ability"("role_id", "ability_id")
VALUES ($1, $2)
RETURNING id, role_id, ability_id
`

type CreateRoleAbilityParams struct {
	RoleID    int32 `json:"roleId"`
	AbilityID int32 `json:"abilityId"`
}

func (q *Queries) CreateRoleAbility(ctx context.Context, arg CreateRoleAbilityParams) (RoleAbility, error) {
	row := q.db.QueryRow(ctx, createRoleAbility, arg.RoleID, arg.AbilityID)
	var i RoleAbility
	err := row.Scan(&i.ID, &i.RoleID, &i.AbilityID)
	return i, err
}

const deleteRoleAbility = `-- name: DeleteRoleAbility :exec
DELETE
FROM "role_ability"
WHERE "id" = $1
`

func (q *Queries) DeleteRoleAbility(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRoleAbility, id)
	return err
}

const getRoleAbilities = `-- name: GetRoleAbilities :many
SELECT id, role_id, ability_id
FROM "role_ability"
`

func (q *Queries) GetRoleAbilities(ctx context.Context) ([]RoleAbility, error) {
	rows, err := q.db.Query(ctx, getRoleAbilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoleAbility{}
	for rows.Next() {
		var i RoleAbility
		if err := rows.Scan(&i.ID, &i.RoleID, &i.AbilityID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleAbility = `-- name: UpdateRoleAbility :exec
UPDATE "role_ability"
SET "role_id" = $2 , "ability_id" = $3
WHERE "id" = $1
`

type UpdateRoleAbilityParams struct {
	ID        int32 `json:"id"`
	RoleID    int32 `json:"roleId"`
	AbilityID int32 `json:"abilityId"`
}

func (q *Queries) UpdateRoleAbility(ctx context.Context, arg UpdateRoleAbilityParams) error {
	_, err := q.db.Exec(ctx, updateRoleAbility, arg.ID, arg.RoleID, arg.AbilityID)
	return err
}

const upsertRoleAbility = `-- name: UpsertRoleAbility :one
INSERT INTO "role_ability"("role_id", "ability_id")
VALUES ($1, $2)
ON CONFLICT ("role_id","ability_id") DO UPDATE SET "role_id" = $1, "ability_id" = $2
RETURNING id, role_id, ability_id
`

type UpsertRoleAbilityParams struct {
	RoleID    int32 `json:"roleId"`
	AbilityID int32 `json:"abilityId"`
}

func (q *Queries) UpsertRoleAbility(ctx context.Context, arg UpsertRoleAbilityParams) (RoleAbility, error) {
	row := q.db.QueryRow(ctx, upsertRoleAbility, arg.RoleID, arg.AbilityID)
	var i RoleAbility
	err := row.Scan(&i.ID, &i.RoleID, &i.AbilityID)
	return i, err
}
