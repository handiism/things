// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package sqlc

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "role"("name")
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateRole(ctx context.Context, name RoleEnum) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE
FROM "role"
WHERE "id" = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, name
FROM "role"
WHERE "id" = $1
`

func (q *Queries) GetRoleById(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleById, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name
FROM "role"
WHERE "name" = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name RoleEnum) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name
FROM "role"
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE "role"
SET "name" = $2
WHERE "id" = $1
`

type UpdateRoleParams struct {
	ID   int32    `json:"id"`
	Name RoleEnum `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.ID, arg.Name)
	return err
}

const upsertRole = `-- name: UpsertRole :one
INSERT INTO "role"("name")
VALUES ($1)
ON CONFLICT ("name") DO UPDATE SET "name" = $1
RETURNING id, name
`

func (q *Queries) UpsertRole(ctx context.Context, name RoleEnum) (Role, error) {
	row := q.db.QueryRow(ctx, upsertRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
