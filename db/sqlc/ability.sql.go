// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ability.sql

package sqlc

import (
	"context"
)

const createAbility = `-- name: CreateAbility :one
INSERT INTO "ability"("name")
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateAbility(ctx context.Context, name AbilityEnum) (Ability, error) {
	row := q.db.QueryRow(ctx, createAbility, name)
	var i Ability
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createAbilityWithoutConflict = `-- name: CreateAbilityWithoutConflict :one
INSERT INTO "ability"("name")
VALUES ($1)
ON CONFLICT ("name") DO UPDATE SET "name" = $1
RETURNING id, name
`

func (q *Queries) CreateAbilityWithoutConflict(ctx context.Context, name AbilityEnum) (Ability, error) {
	row := q.db.QueryRow(ctx, createAbilityWithoutConflict, name)
	var i Ability
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteAbility = `-- name: DeleteAbility :exec
DELETE
FROM "ability"
WHERE "id" = $1
`

func (q *Queries) DeleteAbility(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAbility, id)
	return err
}

const getAbilities = `-- name: GetAbilities :many
SELECT id, name
FROM "ability"
`

func (q *Queries) GetAbilities(ctx context.Context) ([]Ability, error) {
	rows, err := q.db.Query(ctx, getAbilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ability{}
	for rows.Next() {
		var i Ability
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAbilityById = `-- name: GetAbilityById :one
SELECT id, name
FROM "ability"
WHERE "id" = $1
`

func (q *Queries) GetAbilityById(ctx context.Context, id int32) (Ability, error) {
	row := q.db.QueryRow(ctx, getAbilityById, id)
	var i Ability
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateAbility = `-- name: UpdateAbility :exec
UPDATE "ability"
SET "name" = $2
WHERE "id" = $1
`

type UpdateAbilityParams struct {
	ID   int32       `json:"id"`
	Name AbilityEnum `json:"name"`
}

func (q *Queries) UpdateAbility(ctx context.Context, arg UpdateAbilityParams) error {
	_, err := q.db.Exec(ctx, updateAbility, arg.ID, arg.Name)
	return err
}
